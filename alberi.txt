/*funzione che conta quanti nodi hanno uno e un solo figlio */
int solo_un_figlio (nodo_albero* a) {
	if(a==NULL)
		return 0;
	int conta=0;
	if( (a->right==NULL && a->left!=NULL) || (a->right!=NULL && a->left==NULL))
		conta ++;
	return conta+solo_un_figlio(a->right)+solo_un_figlio(a->left);
}


/*funzione che conta tutti i nodi di un albero*/
int nodi_albero (nodo_albero* a) {
	if(a==NULL)
		return 0;
	else
		return 1+nodi_albero(a->right)+nodi_albero(a->left);
}

/*funzione fa la somma del campo info di tutti i nodi*/
int somma (nodo_albero* a) {
	if(a==NULL)
		return 0;
	else
		return a->info+somma(a->left)+somma(a->right);
}

/*funzione che fa la ricerca di un valore*/   //disclaimer dovrebbe essere ricerca in pre ordine ma non ne sono sicuro chiedere a qualcuno
int ricercaValore (nodo_albero* a,int v) {
	if(a==NULL)
		return 0;
	int esiste=0;
	if(a->info==v)
		esiste=1;
	if(ricercaValore(a->left,v))
		esiste=1;
	if(ricercaValore(a->right,v))
		esiste=1;
	return esiste;
}

/*funzione che verifica se sono una foglia*/
int is_foglia (nodo_albero* a){
	if (a == NULL) 
		return 0;
	if (a->left == NULL && a->right == NULL)	//sono una foglia
		return 1;
	return 0;
}

/*funzione che verifica quanti nodi hanno figli foglie*/
/*reminder non conta quanti figli ma conta quanti nodi ha figli foglie*/
int conta_nodi (nodo_albero* a){
	if (a == NULL)
		return 0;
	int conta = 0;
	if (is_foglia(a->left) || is_foglia(a->right))	//se ho un figlio foglia conta
		conta++;
	return conta + conta_nodi(a->left) + conta_nodi(a->right);
}

/*funzione che conta solo se ha esattamente due figli foglie non puo essere solo uno ha una funzione di supporto che verifica se è una foglia*/
int conta_figli_due_nodi (nodo_albero* a) {
	if(a==NULL)
		return 0;
	int conta=0;
	if(is_foglia(a->left) && is_foglia(a->right)) 		//deve averne per forza due
		conta++;
	return conta+conta_figli_due_nodi(a->left) + conta_figli_due_nodi(a->right);
}

/*funzione che restituisce 1 se ci sta un nodo che ha due figli foglie altimenti 0 ha una funzione di supporto che verifica se è un a fogli*/
int verifica_figli_due_nodi (nodo_albero* a) {
	if(a==NULL)
		return 0;
	if(is_foglia(a->left) && is_foglia(a->right))
		return 1;
	return verifica_figli_due_nodi(a->left) || verifica_figli_due_nodi(a->right);
}

/*funzione che conta quante foglie ha il campo info =10*/
int conta_foglie_dieci (nodo_albero* a) {
	if(a==NULL)
		return 0;
	int conta=0;
	if(is_foglia(a) && (a->info==10))
		conta++;
	return conta + conta_foglie_dieci(a->left)+conta_foglie_dieci(a->right);
}

/*funzione che verifica se ci sono esattamente 10 foglie se è cosi ti torna 1 fa uso della funzione contafoglie*/
int esattamente_dieci_foglie (nodo_albero* a) {
	if(a==NULL)
		return 0;
	if(conta_foglie(a)==10)	//contafoglie è una funzione di supporto
		return 1;
	return 0;
}

/*funzione che verifica se ci sta una foglia destra nell'albero*/
int verifica_esiste_foglia_destra (nodo_albero* a) {
	if(a==NULL)
		return 0;
	if(is_foglia(a->right))
		return 1;
	return verifica_esiste_foglia_destra(a->left) || verifica_esiste_foglia_destra(a->right);
}

int foglia_meno_profnda (nodo_albero* a, int prof) {
	if(a==NULL)
		return -1;
	if(a->left==0 && a->right==0)
		return prof;
	int l=foglia_meno_profnda(a->left,prof+1);
	int r=foglia_meno_profnda(a->right,prof+1);
	if(l==-1)
		return r;
	if(r==-1)
		return l;
	if(l<r) 
		return l;
	return r;
}

/*Verifica se tutti i nodi di un albero hanno campo info uguale all'altezza del nodo.*/
int verifica_tutti_info_altezza (nodo_albero* a, int altezza) {
	int verifica=1;
	if(a==NULL)
		return 1;
	if(a->info!=altezza)
		verifica=0;
	//printf("\nnodo: %c\tinfo: %d\th: %d\n",a->nome,a->info,altezza);
	int l=verifica_tutti_info_altezza(a->left,altezza+1);
	int r=verifica_tutti_info_altezza(a->right,altezza+1);
	return verifica && l && r;
}

/*funzione che conta quanti nodi hanno il campo info uguale all'altezza del nodo */
int nodi_info_uguale_altezza_ric_nodo_cambia(nodo_albero* a, int altezza){
    int conta=0;
    if(a==NULL)
        return 0;
    if(a->info==altezza)
        conta++;
	//printf("\nnodo: %c\tinfo: %d\th: %d\n",a->nome,a->info,altezza);
    return conta + nodi_info_uguale_altezza_ric_nodo_cambia(a->left, altezza+1) + nodi_info_uguale_altezza_ric_nodo_cambia(a->right, altezza+1);
}
/*funzione principale*/
int nodi_info_uguale_altezza_nodo_cambia(nodo_albero* a){	//funzione di supporto
    return nodi_info_uguale_altezza_ric_nodo_cambia(a,0);
}


/*Verifica se tutti i nodi di un albero hanno campo info uguale all'altezza del albero usa la funzione altezza*/
/*per fare cio mi scrivo una funzione d'appoggio che mi calcola l'altezza* è equivalente a dire la profondita*/
int fun_altezza (nodo_albero* a) {
	if(a==NULL)
		return -1;
	int l=fun_altezza(a->left);
	int r=fun_altezza(a->right);
	if(l<r)
		return r+1;
	return l+1;			//se fosse stato un albero arbitrario return r
}
int verifica_info_alt_albero (nodo_albero* a,int altezza){
	int verifica=1;
	if (a==NULL)
		return 1;
	if(a->info!=altezza)
		verifica=0;
	/*con questa scritta verifico i valori di info e lo confronto con la sua altezza*/
	//printf("\nnodo: %c\tinfo: %d\th: %d\n",a->nome,a->info,h); 			//attivala solo se non ti aspetti il valore trovato
	int l=verifica_info_alt_albero(a->left,altezza);
	int r=verifica_info_alt_albero(a->right,altezza);
	return  l && r && verifica;
}

int verifica_info_alt_albero_ric (nodo_albero* a) {
	int h=fun_altezza(a);
	return verifica_info_alt_albero(a,h);
}